'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _message = require('../../../message.json');

var _message2 = _interopRequireDefault(_message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import data , then update when change by hot-loader

var url_message = "/api/message.json";

var MessageForm = React.createClass({
  displayName: 'MessageForm',

  messageSubmit: function messageSubmit(comment) {
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();

    $.ajax({
      url: url_message,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function (data) {
        //this.setState({data: data});
      }.bind(this),
      error: function (xhr, status, err) {
        this.setState({ data: comments });
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  componentWillMount: function componentWillMount() {
    this.setState({ data: _message2.default });
    //this.loadMessage();
    //setInterval(this.loadMessage,2000);
  },
  getInitialState: function getInitialState() {
    return { author: '', text: '' };
  },
  handleAuthorChange: function handleAuthorChange(e) {
    this.setState({ author: e.target.value });
  },
  handleTextChange: function handleTextChange(e) {
    this.setState({ text: e.target.value });
  },
  handleSubmit: function handleSubmit(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    console.log(author, text);
    if (!text || !author) {
      return;
    }
    this.messageSubmit({ author: author, text: text });
    this.setState({ author: '', text: '' });
  },
  render: function render() {
    return React.createElement(
      'form',
      { className: 'messageForm', onSubmit: this.handleSubmit },
      React.createElement('input', {
        type: 'text',
        placeholder: 'Your name',
        value: this.state.author,
        onChange: this.handleAuthorChange
      }),
      React.createElement('input', {
        type: 'text',
        placeholder: 'Say something...',
        value: this.state.text,
        onChange: this.handleTextChange
      }),
      React.createElement('input', { type: 'submit', value: 'Post' })
    );
  }
});

var MessageBox = React.createClass({
  displayName: 'MessageBox',

  /*
  loadMessage: function() {
    $.ajax({
      url: url_message,
      dataType: 'json',
      cache: false,
      beforeSend: function() {
        console.log('beforeSend')
      },
      success: function(data) {
        console.log(data);
        this.setState({
          data: data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.log(this.props.url, status, err);
      }.bind(this)
    });
  },
  */

  getInitialState: function getInitialState() {
    return { data: [] };
  },
  componentWillMount: function componentWillMount() {
    this.setState({ data: _message2.default });
    //this.loadMessage();
    //setInterval(this.loadMessage,2000);
  },
  render: function render() {
    return React.createElement(
      'div',
      { className: 'message_box' },
      this.props.children
    );
  }
});

exports.default = MessageForm;