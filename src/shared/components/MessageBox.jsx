import data from '../../../message.json'
// import data , then update when change by hot-loader

const url_message="/api/message.json";

class MessageItem extends React.Component {
  render() {
    return ( < div className = "row" >
      < div className = "col-md-3" >
      <h4>{this.props.data.author}</h4> < /div>
        <div className="col-md-9">
          <p>{this.props.data.text}</p >
      < /div>
      </div >
    );
  }
};

const MessageList = React.createClass({
  render: function() {
    console.log(this.props.data);
    const messages = this.props.data.map(function(data) {
      return (
        <MessageItem key={data.id} data={data}>
      </MessageItem>
      );
    })
    return (
      <div className="message_list">
      {messages}
      </div>
    );
  }
});

const MessageForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onMessageSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="messageForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

const MessageBox = React.createClass({
  /*
  loadMessage: function() {
    $.ajax({
      url: url_message,
      dataType: 'json',
      cache: false,
      beforeSend: function() {
        console.log('beforeSend')
      },
      success: function(data) {
        console.log(data);
        this.setState({
          data: data
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.log(this.props.url, status, err);
      }.bind(this)
    });
  },
  */
  messageSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: url_message,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        //this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentWillMount:function() {
    this.setState({data:data})
    //this.loadMessage();
    //setInterval(this.loadMessage,2000);
  },
  render:function(){
    return (
      <div className="message_box">
      <MessageList data={this.state.data}/>
      <MessageForm onMessageSubmit={this.messageSubmit} />
    </div>);
  }
});

export default MessageBox;

/*
export
default class MessageBox extends React.Component {
  render() {
    //this.loadMessage();

    return (
      <div className="message_box">
      <MessageList url="/api/message.json"/>
    </div>
    );
  }
}
*/